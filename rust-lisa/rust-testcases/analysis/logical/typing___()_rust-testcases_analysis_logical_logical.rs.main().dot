digraph {
	"node0" [shape="rect",color="black",label=<let x : untyped = true<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ x: [bool]<BR/>[stack: [bool]] ]]<BR/>}} -&gt; [x]>];
	"node1" [shape="rect",color="gray",label=<let z : untyped = ||(y, x)<BR/>{{<BR/>heap [[ _|_ ]]<BR/>value [[ _|_ ]]<BR/>}} -&gt; []>];
	"node2" [shape="rect",color="gray",label=<let a : untyped = 1<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ _|_ ]]<BR/>}} -&gt; [a]>];
	"node3" [shape="rect",color="gray",label=<let b : untyped = 2<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ _|_ ]]<BR/>}} -&gt; [b]>];
	"node4" [shape="rect",color="gray",label=<let e : untyped = &lt;=(a, a)<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ _|_ ]]<BR/>}} -&gt; [e]>];
	"node5" [shape="rect",color="gray",label=<let d : untyped = &lt;(a, b)<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ _|_ ]]<BR/>}} -&gt; [d]>];
	"node6" [shape="rect",color="gray",label=<let s : untyped = !(y)<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ _|_ ]]<BR/>}} -&gt; [s]>];
	"node7" [shape="rect",color="gray",label=<let g : untyped = &gt;=(a, b)<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ _|_ ]]<BR/>}} -&gt; [g]>];
	"node8" [shape="rect",color="gray",label=<let r : untyped = !(x)<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ _|_ ]]<BR/>}} -&gt; [r]>];
	"node9" [shape="rect",color="gray",label=<let f : untyped = &gt;(a, b)<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ _|_ ]]<BR/>}} -&gt; [f]>];
	"node10" [shape="rect",color="gray",label=<let w : untyped = ||(x, y)<BR/>{{<BR/>heap [[ _|_ ]]<BR/>value [[ _|_ ]]<BR/>}} -&gt; []>];
	"node11" [shape="rect",color="gray",label=<let y : untyped = false<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ x: [bool]<BR/>y: [bool]<BR/>[stack: [bool]] ]]<BR/>}} -&gt; [y]>];
	"node12" [shape="rect",color="gray",label=<let p : untyped = ||(y, x)<BR/>{{<BR/>heap [[ _|_ ]]<BR/>value [[ _|_ ]]<BR/>}} -&gt; []>];
	"node13" [shape="rect",color="gray",label=<let c : untyped = &gt;(a, b)<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ _|_ ]]<BR/>}} -&gt; [c]>];
	"node14" [shape="rect",color="gray",label=<let q : untyped = ||(x, y)<BR/>{{<BR/>heap [[ _|_ ]]<BR/>value [[ _|_ ]]<BR/>}} -&gt; []>];
	"node15" [shape="rect",color="black",peripheries="2",label=<ret<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ _|_ ]]<BR/>}} -&gt; [skip]>];
	"node1" -> "node10" [color="black"];
	"node2" -> "node3" [color="black"];
	"node0" -> "node11" [color="black"];
	"node3" -> "node13" [color="black"];
	"node4" -> "node9" [color="black"];
	"node5" -> "node4" [color="black"];
	"node6" -> "node2" [color="black"];
	"node7" -> "node15" [color="black"];
	"node8" -> "node6" [color="black"];
	"node9" -> "node7" [color="black"];
	"node10" -> "node14" [color="black"];
	"node11" -> "node1" [color="black"];
	"node12" -> "node8" [color="black"];
	"node13" -> "node5" [color="black"];
	"node14" -> "node12" [color="black"];
subgraph cluster_legend {
	label="Legend";
	style=dotted;
	node [shape=plaintext];
	"legend" [label=<<table border="0" cellpadding="2" cellspacing="0" cellborder="0"><tr><td align="right">node border&nbsp;</td><td align="left"><font color="gray">gray</font>, single</td></tr><tr><td align="right">entrypoint border&nbsp;</td><td align="left"><font color="black">black</font>, single</td></tr><tr><td align="right">exitpoint border&nbsp;</td><td align="left"><font color="black">black</font>, double</td></tr><tr><td align="right">sequential edge&nbsp;</td><td align="left"><font color="black">black</font>, solid</td></tr><tr><td align="right">true edge&nbsp;</td><td align="left"><font color="blue">blue</font>, dashed</td></tr><tr><td align="right">false edge&nbsp;</td><td align="left"><font color="red">red</font>, dashed</td></tr></table>>];
}

}
